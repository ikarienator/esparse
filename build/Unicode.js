"use strict";

exports.isIdentifierStart = isIdentifierStart;
exports.isIdentifierPart = isIdentifierPart;
exports.isWhitespace = isWhitespace;
exports.codePointLength = codePointLength;
exports.codePointAt = codePointAt;
exports.codePointString = codePointString;
var _UnicodeDataJs = require("./UnicodeData.js");

var IDENTIFIER = _UnicodeDataJs.IDENTIFIER;
var WHITESPACE = _UnicodeDataJs.WHITESPACE;


function binarySearch(table, val) {
    var right = table.length / 3 - 1,
        left = 0,
        mid = 0,
        test = 0,
        offset = 0;

    while (left <= right) {
        mid = left + right >> 1;
        offset = mid * 3;
        test = table[offset];

        if (val < test) {
            right = mid - 1;
        } else if (val === test || val <= test + table[offset + 1]) {
            return table[offset + 2];
        } else {
            left = mid + 1;
        }
    }

    return 0;
}

function isIdentifierStart(code) {
    return binarySearch(IDENTIFIER, code) === 2;
}

function isIdentifierPart(code) {
    return binarySearch(IDENTIFIER, code) >= 2;
}

function isWhitespace(code) {
    return binarySearch(WHITESPACE, code) === 1;
}

function codePointLength(code) {
    return code > 65535 ? 2 : 1;
}

function codePointAt(str, offset) {
    var a = str.charCodeAt(offset);

    if (a >= 55296 && a <= 56319 && str.length > offset + 1) {
        var b = str.charCodeAt(offset + 1);

        if (b >= 56320 && b <= 57343) {
            return (a - 55296) * 1024 + b - 56320 + 65536;
        }
    }

    return a;
}

function codePointString(code) {
    if (code > 1114111) {
        return "";
    }if (code <= 65535) {
        return String.fromCharCode(code);
    } // If value is greater than 0xffff, then it must be encoded
    // as 2 UTF-16 code units in a surrogate pair.

    code -= 65536;

    return String.fromCharCode((code >> 10) + 55296, code % 1024 + 56320);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Vbmljb2RlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O1FBaUNnQixpQkFBaUIsR0FBakIsaUJBQWlCO1FBS2pCLGdCQUFnQixHQUFoQixnQkFBZ0I7UUFLaEIsWUFBWSxHQUFaLFlBQVk7UUFLWixlQUFlLEdBQWYsZUFBZTtRQUtmLFdBQVcsR0FBWCxXQUFXO1FBaUJYLGVBQWUsR0FBZixlQUFlOzZCQXRFUSxrQkFBa0I7O0lBQWhELFVBQVUsa0JBQVYsVUFBVTtJQUFFLFVBQVUsa0JBQVYsVUFBVTs7O0FBRS9CLFNBQVMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7QUFFOUIsUUFBSSxLQUFLLEdBQUcsQUFBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBSSxDQUFDO1FBQzlCLElBQUksR0FBRyxDQUFDO1FBQ1IsR0FBRyxHQUFHLENBQUM7UUFDUCxJQUFJLEdBQUcsQ0FBQztRQUNSLE1BQU0sR0FBRyxDQUFDLENBQUM7O0FBRWYsV0FBTyxJQUFJLElBQUksS0FBSyxFQUFFO0FBRWxCLFdBQUcsR0FBRyxBQUFDLElBQUksR0FBRyxLQUFLLElBQUssQ0FBQyxDQUFDO0FBQzFCLGNBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLFlBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXJCLFlBQUksR0FBRyxHQUFHLElBQUksRUFBRTtBQUVaLGlCQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUVuQixNQUFNLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUU7QUFFeEQsbUJBQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUU1QixNQUFNO0FBRUgsZ0JBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO0tBQ0o7O0FBRUQsV0FBTyxDQUFDLENBQUM7Q0FDWjs7QUFFTSxTQUFTLGlCQUFpQixDQUFDLElBQUksRUFBRTtBQUVwQyxXQUFPLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQy9DOztBQUVNLFNBQVMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO0FBRW5DLFdBQU8sWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDOUM7O0FBRU0sU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFO0FBRS9CLFdBQU8sWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDL0M7O0FBRU0sU0FBUyxlQUFlLENBQUMsSUFBSSxFQUFFO0FBRWxDLFdBQU8sSUFBSSxHQUFHLEtBQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2hDOztBQUVNLFNBQVMsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFFckMsUUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFL0IsUUFBSSxDQUFDLElBQUksS0FBTSxJQUNYLENBQUMsSUFBSSxLQUFNLElBQ1gsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBRXpCLFlBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDOztBQUVuQyxZQUFJLENBQUMsSUFBSSxLQUFNLElBQUksQ0FBQyxJQUFJLEtBQU07QUFDMUIsbUJBQU8sQ0FBQyxDQUFDLEdBQUcsS0FBTSxDQUFBLEdBQUksSUFBSyxHQUFHLENBQUMsR0FBRyxLQUFNLEdBQUcsS0FBTyxDQUFDO1NBQUE7S0FDMUQ7O0FBRUQsV0FBTyxDQUFDLENBQUM7Q0FDWjs7QUFFTSxTQUFTLGVBQWUsQ0FBQyxJQUFJLEVBQUU7QUFFbEMsUUFBSSxJQUFJLEdBQUcsT0FBUTtBQUNmLGVBQU8sRUFBRSxDQUFDO0tBQUEsQUFFZCxJQUFJLElBQUksSUFBSSxLQUFNO0FBQ2QsZUFBTyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQUE7OztBQUtyQyxRQUFJLElBQUksS0FBTyxDQUFDOztBQUVoQixXQUFPLE1BQU0sQ0FBQyxZQUFZLENBQ3RCLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQSxHQUFJLEtBQU0sRUFDckIsQUFBQyxJQUFJLEdBQUcsSUFBSyxHQUFJLEtBQU0sQ0FBQyxDQUFDO0NBQ2hDIiwiZmlsZSI6InNyYy9Vbmljb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURFTlRJRklFUiwgV0hJVEVTUEFDRSB9IGZyb20gXCIuL1VuaWNvZGVEYXRhLmpzXCI7XG5cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaCh0YWJsZSwgdmFsKSB7XG5cbiAgICBsZXQgcmlnaHQgPSAodGFibGUubGVuZ3RoIC8gMykgLSAxLFxuICAgICAgICBsZWZ0ID0gMCxcbiAgICAgICAgbWlkID0gMCxcbiAgICAgICAgdGVzdCA9IDAsXG4gICAgICAgIG9mZnNldCA9IDA7XG5cbiAgICB3aGlsZSAobGVmdCA8PSByaWdodCkge1xuXG4gICAgICAgIG1pZCA9IChsZWZ0ICsgcmlnaHQpID4+IDE7XG4gICAgICAgIG9mZnNldCA9IG1pZCAqIDM7XG4gICAgICAgIHRlc3QgPSB0YWJsZVtvZmZzZXRdO1xuXG4gICAgICAgIGlmICh2YWwgPCB0ZXN0KSB7XG5cbiAgICAgICAgICAgIHJpZ2h0ID0gbWlkIC0gMTtcblxuICAgICAgICB9IGVsc2UgaWYgKHZhbCA9PT0gdGVzdCB8fCB2YWwgPD0gdGVzdCArIHRhYmxlW29mZnNldCArIDFdKSB7XG5cbiAgICAgICAgICAgIHJldHVybiB0YWJsZVtvZmZzZXQgKyAyXTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBsZWZ0ID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJZGVudGlmaWVyU3RhcnQoY29kZSkge1xuXG4gICAgcmV0dXJuIGJpbmFyeVNlYXJjaChJREVOVElGSUVSLCBjb2RlKSA9PT0gMjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSWRlbnRpZmllclBhcnQoY29kZSkge1xuXG4gICAgcmV0dXJuIGJpbmFyeVNlYXJjaChJREVOVElGSUVSLCBjb2RlKSA+PSAyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGNvZGUpIHtcblxuICAgIHJldHVybiBiaW5hcnlTZWFyY2goV0hJVEVTUEFDRSwgY29kZSkgPT09IDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2RlUG9pbnRMZW5ndGgoY29kZSkge1xuXG4gICAgcmV0dXJuIGNvZGUgPiAweGZmZmYgPyAyIDogMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHN0ciwgb2Zmc2V0KSB7XG5cbiAgICBsZXQgYSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XG5cbiAgICBpZiAoYSA+PSAweGQ4MDAgJiZcbiAgICAgICAgYSA8PSAweGRiZmYgJiZcbiAgICAgICAgc3RyLmxlbmd0aCA+IG9mZnNldCArIDEpIHtcblxuICAgICAgICBsZXQgYiA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCArIDEpO1xuXG4gICAgICAgIGlmIChiID49IDB4ZGMwMCAmJiBiIDw9IDB4ZGZmZilcbiAgICAgICAgICAgIHJldHVybiAoYSAtIDB4ZDgwMCkgKiAweDQwMCArIGIgLSAweGRjMDAgKyAweDEwMDAwO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29kZVBvaW50U3RyaW5nKGNvZGUpIHtcblxuICAgIGlmIChjb2RlID4gMHgxMGZmZmYpXG4gICAgICAgIHJldHVybiBcIlwiO1xuXG4gICAgaWYgKGNvZGUgPD0gMHhmZmZmKVxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcblxuICAgIC8vIElmIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiAweGZmZmYsIHRoZW4gaXQgbXVzdCBiZSBlbmNvZGVkXG4gICAgLy8gYXMgMiBVVEYtMTYgY29kZSB1bml0cyBpbiBhIHN1cnJvZ2F0ZSBwYWlyLlxuXG4gICAgY29kZSAtPSAweDEwMDAwO1xuXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAgIChjb2RlID4+IDEwKSArIDB4ZDgwMCxcbiAgICAgICAgKGNvZGUgJSAweDQwMCkgKyAweGRjMDApO1xufVxuXG4iXX0=